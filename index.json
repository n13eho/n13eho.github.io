[{"categories":["ABRsim"],"content":"MAHIMAHI格式正确解读 Each line gives a timestamp in milliseconds (from the beginning of the trace) and represents an opportunity for one 1500-byte packet to be drained from the bottleneck queue and cross the link. If more than one MTU-sized packet can be transmitted in a particular millisecond, the same timestamp is repeated on multiple lines. （对啊明明写的是ms怎么后面就一点也不记得了） mahimahi文件中是一序列的整数，每一个整数代表网络模拟开始以来的时间戳，单位为milisecond毫秒ms，代表着这个时刻会向模拟网络链路中发送大小为1.5KB的数据包，也就是12Kb，这个大小就是MSS（TCP连接建立时，收发双方协商通信时每一个报文段所能承载的最大数据长度） 例如一个速度为12Mbps的网络的mahimahi格式的trace即为：0, 1, 2, 3, 4, …。也就是分别在t=0、1、2、3、4ms的时刻发送了12Kb大小的包，那么反过来算就是12Kb/1ms = 12Mbps的速度了 再例如一个内容为0, 1, 1, 1, 1的mahimahi格式trace file，这就代表着它在t=1ms的时刻发送了四个数据包，那么可计算其速度为4*12Kb/1ms = 48Mbps ","date":"2023-03-24","objectID":"/mahimahiformatandtransform/:1:0","tags":["mahimahi","仿真"],"title":"MAHIMAHI格式理解和转化逻辑","uri":"/mahimahiformatandtransform/"},{"categories":["ABRsim"],"content":"MAHIMAHI trace file转化逻辑和代码，以自定义的trace log file为例 代码直接来源是Pensieve仓库，traces文件夹下 要点有3： 带宽计算的单位，包括秒s和毫秒ms、比特b和字节B的转化 变量millisec_count会归0，他代表原trace中提供的带宽对应的一段时间，可以理解为以ms的粒度在走完一个receive time。因此每次跳出循环就是判断millisec_count是否超过了这个块的接收时间，如果已经超过了，就不继续写了 变量millisec_time就是一直在递增的时刻，（它不重置0的），当满足条件时，就会写一个或者多个当前的milisec_time。这个条件就是to_send向下取整要大于0。算的上是核心逻辑了，下面展开说 to_send，表示要发送的数据包的个数，满1即发，它是这么计算的： to_send = (millisec_count * pkt_per_millisec) - pkt_count to_send = np.floor(to_send) for _ in range(int(to_send)): mf.write(str(millisec_time) + '\\n') pkt_count += to_send 其中，pkt_per_millisec = throughput / BYTES_PER_PKT，也就是当前这个throughput里，其实对应了多少个12Kb包，每一次随着milisec_cout增加就发一个包，直到发够一个单位1 了然😊 ","date":"2023-03-24","objectID":"/mahimahiformatandtransform/:2:0","tags":["mahimahi","仿真"],"title":"MAHIMAHI格式理解和转化逻辑","uri":"/mahimahiformatandtransform/"},{"categories":["ABRsim"],"content":"关于最后的时间戳并不是原trace的finish_time的时间戳 我开始疑惑了好久，只有一行的话，都能对得上，也就是mahimahi的最后一个时间戳就是原trace 的finishtime（差不太远），但是一旦是多行，两边的时间就对不上了。仔细想想：转换代码里面每次进循环都只关注了tracefile中有吞吐量这一行，在开始时间到结束时间内，它确实可以正确表示，但是我一直忽略了，上一次的finish_time到下一次的start_time之间其实还有个idel_time！！！ 理论上讲这个idel_time期间是没有带宽的，或者说不可测，因为都没发送数据。但是mahimahi不会体现这个idel time，他可以说是把所有idel time都给压缩了，变成持续的反映带宽的时间戳。所以两边的时间戳对不上 影响大吗？ 至此这个数据集转换因该是没问题了 ","date":"2023-03-24","objectID":"/mahimahiformatandtransform/:3:0","tags":["mahimahi","仿真"],"title":"MAHIMAHI格式理解和转化逻辑","uri":"/mahimahiformatandtransform/"},{"categories":["ABRsim"],"content":"仓库地址：GitHub - hongzimao/pensieve: Neural Adaptive Video Streaming with Pensieve (SIGCOMM '17) ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:0:0","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"1 配环境 Pensieve实验时间是在2017年，原环境是Ubuntu 16.04, Tensorflow v1.1.0, TFLearn v0.3.1 and Selenium v2.39.0，因此现在（2023）均达到这些要求需要和python及其他包的版本做好一番适配调整 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:1:0","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"1.1 ubuntu16.04虚拟机安装 轻车熟路，不赘述 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:1:1","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"1.2 Tensorflow v1.1.0 当我发现不用换成清华源也能装，我就没用清华的pip源了 首先安装py2.7的pip和依赖 sudo apt-get install python-pip python-dev 然后直接安装tf sudo pip install tensorflow==1.1.0 于是会遇到一个py版本的问题如下： 从连接看这边下载的是numpy的1.24.2版本，但是很多包可能从某个时候开始就不再支持python2了（比如这篇文章），所以需要手动降级，从官网上面找一个合适的版本提前装上 1.16.3是支持2.7的最后一代，那么就安装1.16.3 pip install numpy==1.16.3 问题解决。但还有别的包如mock、MarkupSafe等等，解决方法都一样，在pypi网站上安装以前支持py2.7的版本即可。期间会碰到递归\u003e=的需求，这个时候找到源头，都安装成最低版本的就行了 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:1:2","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"1.3 chrome and its driver chrome: Download older versions of Google Chrome for Windows, Linux and Mac chrome driver: ChromeDriver - WebDriver for Chrome - Downloads 我这里选择的chrome版本是104.0.5112.102，driver是104.0.5112.79。安装就一句话： sudo dpkg -i google-chrome-xxx ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:1:3","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"1.4 setup.py 我手动执行了这里面的包的安装，避免重复下载install，剩下的建立文件夹的部分保留，按README执行即可。（保留了这些内容： import os start_dir = os.getcwd() # mahimahi os.system(\"sudo sysctl -w net.ipv4.ip_forward=1\") # copy the webpage files to /var/www/html os.chdir( start_dir ) os.system(\"sudo cp video_server/myindex_*.html /var/www/html\") os.system(\"sudo cp video_server/dash.all.min.js /var/www/html\") os.system(\"sudo cp -r video_server/video* /var/www/html\") os.system(\"sudo cp video_server/Manifest.mpd /var/www/html\") # make results directory os.system(\"mkdir cooked_traces\") os.system(\"mkdir rl_server/results\") os.system(\"mkdir run_exp/results\") os.system(\"mkdir real_exp/results\") # need to copy the trace and pre-trained NN model print \"Need to put trace files in 'pensieve/cooked_traces'.\" print \"Need to put pre-trained NN model in 'pensieve/rl_server/results'.\" ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:1:4","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"2 cooked_trace 准备数据集 主要是下载数据集并将其转化为mahimahi的标准格式，否则会Died on std::runtime_error: Invalid integer。mahimahi的格式描述如下 Each line gives a timestamp in milliseconds (from the beginning of the trace) and represents an opportunity for one 1500-byte packet to be drained from the bottleneck queue and cross the link. If more than one MTU-sized packet can be transmitted in a particular millisecond, the same timestamp is repeated on multiple lines. 每一行都是一个从trace开始的时间戳，代表一个1500字节的包通过链路中的瓶颈队列的opportunity。 具体转化方法就直接用traces/文件夹下各个脚本跑，更改代码里面的输入输出路径即可。我用虚拟机跑的，速度比较慢 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:2:0","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"3 run_exp脚本调用链 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:3:0","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"3.1 run_all_traces.py README里面一句话可以跑所有的脚本：python run_all_traces.py，这个py文件中就分别是写log，获取一个莫名其妙的ip地址，产生多条命令，最后再分别执行这些命令。 写完一句log之后，会用os.system(‘sudo sysctl -w net.ipv4.ip_forward=1’)来允许数据包转发，出于安全考虑 出于安全考虑，Linux系统默认是禁止数据包转发的。所谓转发即当主机拥有多于一块的网卡时，其中一块收到数据包，根据数据包的目的ip地址将数据包发往本机另一块网卡，该网卡根据路由表继续发送数据包。这通常是路由器所要实现的功能。 注意这句话是临时生效的，所以每次都会被执行。 然后就是这句莫名其妙的ip，打印出来是111.199.68.11，不懂。。。 ip_data = json.loads(urllib.urlopen(\"http://ip.jsontest.com/\").read()) ip = str(ip_data['ip']) 接着是调用另一个脚本，因为有不同的ABR算法，所以就有对应数量的指令：'python run_traces.py ' + TRACE_PATH + ' ' + ABR_ALGO + ' ' + str(PROCESS_ID) + ' ' + ip，可以看到都会从run_traces.py走，例如python run_traces.py ../cooked_traces/ BB 0 111.199.68.11 这个ip距作者说是为了获取自己的public ip，方便后面服务器web的访问吧，但是我在虚拟机中尝试多种和该ip建立连接的方法未果，我认为这个ip没有一点用 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:3:1","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"3.2 run_traces.py 该脚本从./cooked_traces中读取处理好的mahimahi格式的trace，对于每一个trace，执行命令 commend = 'mm-delay ' + str(MM_DELAY) + \\ ' mm-link 12mbps ' + os.path.join(trace_path, f) + ' ' + \\ '/usr/bin/python ' + RUN_SCRIPT + ' ' + ip + ' ' + \\ abr_algo + ' ' + str(RUN_TIME) + ' ' + \\ process_id + ' ' + f + ' ' + str(sleep_time) 这边mm-delay是用mahimahi对网络环境进行模拟/仿真/构造，第二句则是用的下一个脚本run_video.py，也是使用到chrome的地方 python run_video.py 111.199.68.11 BB 320 0 test_fcc_trace_1171_http---www.yahoo.com_0 3 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:3:2","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"3.3 run_video.py 重点如下： ip被作为生成的url，在用selnium启动chrome之后直接被调用，driver.get(url)。此url就还是有问题，它怎么能代表对应的网页呢？怎么work的 通过自身作为web server，用apache提供服务，在setup.py中已经把对应的html文件复制到了/var/www/html中了 根据不同的abr算法启动了不同的server，BB的话是直接用的../rl_server/simple_server.py。除了dashjs中的原生支持的算法，其余的决策过程都写在server的post响应方法中 That’s right. 上一步的命令只穿了一个trace file的文件名过来，不是路径。除非又在外面套了一层根目录，否则不可能找得到，狗代码全是bug 请原谅我的无知，在稍微了解mahimahi的命令格式后我就知道了已经把trace传给mahimahi并且开始形成对应的网络环境了😅 mm-delay 40 mm-link 12mbps ../cooked_traces/test_fcc_trace_1171_http---www.yahoo.com_0 /usr/bin/python run_video.py 111.199.68.11 BB 320 0 test_fcc_trace_1171_http---www.yahoo.com_0 1 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:3:3","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"3.4 simple_server.py simple_server和同目录下的其他server（mpc，rl等）并不是真正的服务端，而是执客户端。真正的客户端是localhost的apache服务开启的dashjs提供的，这些server负责不断向dashjs发出post请求，播放视频，做决策，写log。 除了mpc，rmpc，pensieve之外的bola，bb等abr算法，都直接运行在dashjs上面，每次客户端请求的url中的网址名称就请求了不同的html界面，那么是怎么做到区分内置算法的：html文件里就一个很简单的abr_id的不同就区分了不同的abr算法，这个肯定和其他的前端代码像交互的，对应的代码都使用grunt编译成了dash.all.min.js一起放进了服务器上（localhost），所以在使用这些算法的时候，本地的代码只用一个simple_server，负责log收集就好了。其余的算法，则会在post请求方法里面实现具体的决策逻辑，对于mpc等来说选择码率就是在这边代码里面选择的了。 因此如果要添加lumos就可以使用两种方法：1. 用python实现另一个lumos_server；2. 将lumos放到dashjs中，处于和bola平行的位置上。但注意这里是内置的，也就是要重新对dash.min.all.js用grunt重新编译，并且也得附上一份对应的myindex_lumos.html才行 还有一个我不明白的点是这个post和get的方法，他整个搜集log和做决策为什么是放在post里面的，模拟客户端不断请求的具体代码我并没有读很懂 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:3:4","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"4 run_exp跑不出来，遇到的问题 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:4:0","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"4.1 xvfb error1：start error \u003cEasyProcess cmd_param=[‘Xvfb’, ‘-help’] cmd=[‘Xvfb’, ‘-help’] oserror=[Errno 2] No such file or directory return_code=None stdout=“None” stderr=“None” timeout_happened=False\u003e 搜了一下，要安装xvfb sudo apt-get install xvfb ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:4:1","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"4.2 mahimahi内部是否可通（？通了就有用了吗，这边通了也没用 然后验证一下mahimahi的ping和curl。查阅手册（man mahimahi）里面有格式 neho@neho-VirtualBox:~$ mm-delay 50 mm-loss uplink 0.2 sh -c 'ping -c 10 -n $MAHIMAHI_BASE' PING 100.64.0.3 (100.64.0.3) 56(84) bytes of data. 64 bytes from 100.64.0.3: icmp_seq=1 ttl=63 time=101 ms 64 bytes from 100.64.0.3: icmp_seq=2 ttl=63 time=107 ms 64 bytes from 100.64.0.3: icmp_seq=3 ttl=63 time=100 ms 64 bytes from 100.64.0.3: icmp_seq=4 ttl=63 time=100 ms 64 bytes from 100.64.0.3: icmp_seq=5 ttl=63 time=111 ms 64 bytes from 100.64.0.3: icmp_seq=6 ttl=63 time=102 ms 64 bytes from 100.64.0.3: icmp_seq=7 ttl=63 time=100 ms 这一步是保证mahimahi本身网络连接没有问题，我看到有issue里有人提到这个 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:4:2","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"4.3 mahimahi下localhost拒绝访问，访问百度都不行🤯 error2：总是有个timeout的报错，总是执行到get(url)这里就无法继续，即便是将url换成百度也不行。但是单独执行后面的半句python run_video.py又是可以的。。。 单独执行一条语句，并且把ip地址改为localhost（本地是随时都开启那个apache服务的，可以直接访问 再次跑上上张图，就会出现拒绝访问的错误：unknown error: net::ERR_CONNECTION_REFUSED，在仓库的issue中也有同样的问题，作者的解释是： The communication between inside and outside mahimahi shell is emulated. So you need to run the web server and chrome/selenium across shell. 我认识，但我不懂。梳理一下现在的问题就是： 这个error_conn 拒绝服务 不自动播放（只有一小段buffer被缓冲；log文件只有14行） 对于问题1，我所做出的无用尝试有： 直接从外面直接跑一个run_all_traces或许能行，事实证明还是不行，mahimahi一隔开就拒绝访问了 怀疑chrome和其driver版本太高所以换成了2020年左右的75.0.3770.8，结果仍然是拒绝访问 修改chrome的什么.desktop文件，在exce语句后添加–no-proxy-server之类的flag，是想禁用所有代理服务器，但也没用 4- 尝试充分理解run web server and chrome across shell的含义，未果 对于问题2，已解决，见4.4 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:4:3","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"4.4 视频不自动播放 通过查阅多则issue，解决方法是在run_video.py对chrome的设置处增添一句： options.add_argument('--autoplay-policy=no-user-gesture-required') 这里目前还是没有开启mahimhi，并且ip用的是locahost。这么跑可以生成想要的log，但还不够😈 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:4:4","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"4.5 mahimahi下的ERR_CONNECTION_REFUSED 4.4中的新添加的语句指向了一个新的abr相关的仓库park，这个py也是run_video.py，我翻看前面注意到了url的赋值的一句话 # generate url (Akshay: use mahimahi base) url = 'http://{}/'.format(os.environ[\"MAHIMAHI_BASE\"]) + 'myindex_RL.html' 这里用的是MAHIMAHI_BASE，man手册里面也用这个代表了某个ip来ping过，可是我也验证过，拿这个代表出来的ip去访问html也是拒绝服务。。。 翻issue看到了这个：When i use mahimahi CLI mm-delay，my local server stop to work,how to solve the problem · Issue #113 · ravinet/mahimahi · GitHub 这个传媒大学的同学就是pensieve过来的，在pensieve那边没得到解决就在这里来问了，他的问题跟我的可以说是一模一样，作者的答复是：  `localhost' refers to the IP address of the local interface – and from inside a container, local really means “local” (still inside the container). This is not where your webserver is running. You can use the $MAHIMAHI_BASE environment variable to refer to the local interface of the “main” container on your computer, outside the mahimahi container. This is probably what the webserver is listening to. 译：localhost指的是本地‘界面’的ip地址，那么如果是在一个内部的容器中，local的意思就是容器的local ip，这个ip地址是在容器里面的，但webserver不是在这个容器中（webserver在机器上，它前面没有加上mahimahi）运行的。 你可以用$MAHIMAHI_BASE这个环境变量去表示这个最主要的container的local 界面的ip，这个main container也就是机器了，是在mahimahi之外的那个container（主机也是一个container），这可能是webserver监听的地址（对于mahimahi来说） 所以我之前尝试在chrome中输入这个ip啥反应都没有，是不是因为我当时是在这个main container下面用这个ip其实是没有意义的，这个ip是mahimahi内部访问外部这个main用的地址？？ ok，这句话换上了之后，从拒绝服务变为了timeout了。。。 现在可以区分：拒绝服务对应的ip，是mahimahi中能ping的通的，但是端口不一定开放，但是localhost这些也都是这个容器内部的localhost，并不是webserver真正的地方，所以这个拒绝服务就是纯纯错的；然而timeout，就是ping也ping不同的，是逻辑上容器内可以访问到外部webserver的地址，无奈它无法ping通。。。。苦恼 这是我今天上午惊人的发现：上下行的trace都换成那个简单的12mbps之后，它是能ping得通我main container的ip的！于是我又执行了wget去获取那个html界面，guess what，能下载得下来！这说明啥，说明是那个下行的trace file有问题，更换trace file！ 更换过trace file之后，配合run_video.py中的url中直接使用$MAHIMAHI_BASE，整个就可以直接跑通了。 btw，mahimahi格式内容意思是，每一行对应一个时间戳，每一个时间戳就发一个大小为12Mb的数据包，因此一个带宽为12Mbps的trace的内容就是1，2，3，4；带宽为48Mbps就是1，1，1，1，2，2，2，2… 失败 这边后来发现理解是错误的，本篇的下一个帖子着重写了mahimahi格式的正确打开方式和其余数据集转化为mahimahi的代码学习（源代码也同样来自Pensieve，但一些细节处需要重新考虑 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:4:5","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"5 运行 开的2G内存的虚拟机一次性同时跑完所有的实验是不可能的。。。跑一晚上一个完整的log都出不来；耗时长，并且可能导致死机，可以像作者团队那样分几个机器来跑。这个虚拟机就开一个线程来跑，每次跑一个算法即可。 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:5:0","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"5.1 chunk fetch time为0的log ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:5:1","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"6 结果 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:6:0","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["ABRsim"],"content":"7 添加一个新的ABR需要做的事情 前面提到，添加新的abr算法可以有两途径，区别是算法逻辑所在的位置：a)放在dashjs中；b)放在python的server中，卸载post方法里面。无论哪种都会需要dashjs层面上的改动，重新编译以及可能重新添加一个html文件。 经观察，凡用python这边rl_server做决策的ABR，他们对应的请求html文件都一样，也就是说新的abr算法也都用同一个html文件。所以这里选择这种方法，这样就无需再用grunt编译整个前端dashjs的部分了。 ","date":"2023-02-10","objectID":"/pensieve%E5%A4%8D%E7%8E%B0/:7:0","tags":["配环境","论文复现"],"title":"Pensieve复现","uri":"/pensieve%E5%A4%8D%E7%8E%B0/"},{"categories":["dash.js"],"content":"仓库地址：artifact/Video-Streaming/ABR-5G/run_exp at main · SIGCOMM21-5G/artifact · GitHub ","date":"2022-12-19","objectID":"/runsigcomm21-5g/:0:0","tags":["配环境","仿真"],"title":"跑SIGCOMM21-5G仿真","uri":"/runsigcomm21-5g/"},{"categories":["dash.js"],"content":"build up环境配置 ","date":"2022-12-19","objectID":"/runsigcomm21-5g/:1:0","tags":["配环境","仿真"],"title":"跑SIGCOMM21-5G仿真","uri":"/runsigcomm21-5g/"},{"categories":["dash.js"],"content":"1 修改全局的python版本，注意pip也得要 ","date":"2022-12-19","objectID":"/runsigcomm21-5g/:1:1","tags":["配环境","仿真"],"title":"跑SIGCOMM21-5G仿真","uri":"/runsigcomm21-5g/"},{"categories":["dash.js"],"content":"2 修改网卡的interface 在setup.sh中将变量interface改为自己网卡的硬件名称，可以通过命令ifconfig进行查看 ","date":"2022-12-19","objectID":"/runsigcomm21-5g/:1:2","tags":["配环境","仿真"],"title":"跑SIGCOMM21-5G仿真","uri":"/runsigcomm21-5g/"},{"categories":["dash.js"],"content":"3 Error: Cannot find specified qdisc on specified device. 可以认为是伪报错，因为本身不影响后续操作并且有时候自己就没了，try： 单独执行一遍sudo bash setup.sh type infconfig，发现会多了几个“网卡” ","date":"2022-12-19","objectID":"/runsigcomm21-5g/:1:3","tags":["配环境","仿真"],"title":"跑SIGCOMM21-5G仿真","uri":"/runsigcomm21-5g/"},{"categories":["dash.js"],"content":"4 from pyvirtualdisplay import Display的SyntaxError 一连串的import到了from easyprocess import EasyProcess, EasyProcessError这里就有一个python2.7不支持的py3的语法：typing类型注解 这里的报错信息如下，就是在EasyProcessError这里出现了py3的语法。其实不应该啊，这个包在python2.7/下面 到了/usr/local/lib/python2.7/dist-packages/easyprocess/examples打开hello.py一看里面用的就是py3的语法。所以现在要把这个包换成2.7的。先用sudo pip uninstall卸载了，再安装。注意默认是最新版本1.1，也就是py3，上官网看一下之前有哪些版本，挑一个2020年左右的：0.2.9 pip install easyprocess==0.2.9 至此可以安心使用py2.7了 ","date":"2022-12-19","objectID":"/runsigcomm21-5g/:1:4","tags":["配环境","仿真"],"title":"跑SIGCOMM21-5G仿真","uri":"/runsigcomm21-5g/"},{"categories":["dash.js"],"content":"5 google chrome and its driver 选一个低版本的match得上的，卸载chrome： sudo apt-get remove google-chrome-stable 再从外部下载deb进行安装 ","date":"2022-12-19","objectID":"/runsigcomm21-5g/:1:5","tags":["配环境","仿真"],"title":"跑SIGCOMM21-5G仿真","uri":"/runsigcomm21-5g/"},{"categories":["dash.js"],"content":"代码梳理 在run_exp/文件夹下运行bash run_5g_driving.sh（也有其他场景的sh）。一个这样的sh文件中的内容是一个for循环遍历../cooked_traces_driving这个文件夹下的所有trace文件，也就是一个背景流量。在循环体中对每一个trace文件都用不同的ABR算法跑一边。所以最小的一个测试单元是： bash trace_run.sh ${trace_file} \u003e ./bw_truth/bw_robustMPC_${filename} \u0026 BACK_PID=$! /usr/bin/python run_video.py ${server_ip} robustMPC 200 0 ${filename} 6 kill ${BACK_PID} \u003e /dev/null 2\u003e\u00261 kill $(ps aux | grep _server | awk '{print $2}') \u003e /dev/null 2\u003e\u00261 首先用trace_run.sh按照trace文件中的具体数值设置背景网络环境，trace_run.sh中使用的主要命令是tc qdisc，这里的输入参数是trace文件的路径；另外第一句末尾的\u0026是bash语法，意味调用子进程异步执行这条命令，是后台任务。紧接着用BACK_PI存放这个后台任务的进程号。第三行就是执行run_video.py脚本，这里面的内容自然就包括了一次测试剩下的内容：打开客户端，请求时评播放，记录output；剩下两句kill是杀死本次仿真的进程，以便进行下一个算法的测试。 run_video.py ","date":"2022-12-19","objectID":"/runsigcomm21-5g/:2:0","tags":["配环境","仿真"],"title":"跑SIGCOMM21-5G仿真","uri":"/runsigcomm21-5g/"},{"categories":["dash.js"],"content":"代码逻辑遇到的问题 ","date":"2022-12-19","objectID":"/runsigcomm21-5g/:3:0","tags":["配环境","仿真"],"title":"跑SIGCOMM21-5G仿真","uri":"/runsigcomm21-5g/"},{"categories":["dash.js"],"content":"1 server ip地址和chrome报错 遇到这样一个问题： 两方版本都是能对得上的，然而还是有unknown error。看代码 ","date":"2022-12-19","objectID":"/runsigcomm21-5g/:3:1","tags":["配环境","仿真"],"title":"跑SIGCOMM21-5G仿真","uri":"/runsigcomm21-5g/"},{"categories":["ML"],"content":"问题描述 游戏规则：正常移动一次的奖励为0；出界时回到当前位置，奖励为-1；A位置选择任意方向都到达A’，奖励为+10；B位置选择任意方向都到达B’，奖励为+5； 折扣率y = 0.9。 假定策略为；从每个格子等概率选择四个移动方向（行为） 用Bellman Equation复现右边5*5的状态估值 ","date":"2022-12-01","objectID":"/bellmanequation-gridworld/:1:0","tags":["BellmanEquation","RL"],"title":"Bellman Equation: Gridworld","uri":"/bellmanequation-gridworld/"},{"categories":["ML"],"content":"解 记号规定：obj移动到左上角的状态：s(0, 0)/s(0)，移动到右下角的状态：s(4, 4)/s(24) 带入Bellman Equation： 对于在位置(0, 0)的状态： 对于这里的 除了特殊位置A和B外，其余都是0 * [] + 0 * [] + 0 * [] + 1 * [0 + 0.9 * 下一个状态的估值]，所以对于位置(0, 0)： 以此类推其余地方的点都一样，除了A点s(1)和B点s(3) 然后就是matlab coding得解： syms v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15 v16 v17 v18 v19 v20 v21 v22 v23 v24; eqns=[ v0 == (9 / 40) * v1 + 9 / 20 * v0 + (9 / 40) * v5 - 0.5, v1 == 10 + 0.9 * v21, v2 == (9 / 40) * (v3 + v1 + v2 + v7) - 0.25, v3 == 5 + 0.9 * v13, v4 == (9 / 40) * (v3 + v9 + 2 * v4) - 0.5, v5 == (9 / 40) * (v5 + v6 + v0 + v10) - 0.25, v6 == (9 / 40) * (v1 + v5 + v7 + v11), v7 == (9 / 40) * (v2 + v6 + v8 + v12), v8 == (9 / 40) * (v3 + v7 + v9 + v13), v9 == (9 / 40) * (v4 + v8 + v9 + v14) - 0.25, v10 == (9 / 40) * (v5 + v10 + v11 + v15) - 0.25, v11 == (9 / 40) * (v6 + v10 + v12 + v16), v12 == (9 / 40) * (v7 + v11 + v13 + v17), v13 == (9 / 40) * (v8 + v12 + v14 + v18), v14 == (9 / 40) * (v9 + v13 + v14 + v19) - 0.25, v15 == (9 / 40) * (v15 + v10 + v16 + v20) - 0.25, v16 == (9 / 40) * (v11 + v15 + v17 + v21), v17 == (9 / 40) * (v12 + v16 + v18 + v22), v18 == (9 / 40) * (v13 + v17 + v19 + v23), v19 == (9 / 40) * (v14 + v18 + v19 + v24) - 0.25, v20 == (9 / 40) * (v15 + v21 + 2 * v20) - 0.5, v21 == (9 / 40) * (v16 + v20 + v21 + v22) - 0.25, v22 == (9 / 40) * (v17 + v21 + v22 + v23) - 0.25, v23 == (9 / 40) * (v18 + v22 + v23 + v24) - 0.25, v24 == (9 / 40) * (v19 + v23 + 2 * v24) - 0.5, ]; vars=[v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24]; ret=solve(eqns,vars); ret = [ [roundn(double(ret.v0),-1), roundn(double(ret.v1),-1) ,roundn(double(ret.v2),-1), roundn(double(ret.v3),-1), roundn(double(ret.v4),-1)], [roundn(double(ret.v5),-1), roundn(double(ret.v6),-1) ,roundn(double(ret.v7),-1), roundn(double(ret.v8),-1), roundn(double(ret.v9),-1)], [roundn(double(ret.v10),-1), roundn(double(ret.v11),-1) ,roundn(double(ret.v12),-1), roundn(double(ret.v13),-1), roundn(double(ret.v14),-1)], [roundn(double(ret.v15),-1), roundn(double(ret.v16),-1) ,roundn(double(ret.v17),-1), roundn(double(ret.v18),-1), roundn(double(ret.v19),-1)], [roundn(double(ret.v20),-1), roundn(double(ret.v21),-1) ,roundn(double(ret.v22),-1), roundn(double(ret.v23),-1), roundn(double(ret.v24),-1)] ] 但是结果出来ret.v0=211544423854643298169167140/63930087070970054436332951，G啊，咋回事？ 噢噢看错了，是对的，中间还有个除号，下面是最后的结果： 对得上 ","date":"2022-12-01","objectID":"/bellmanequation-gridworld/:2:0","tags":["BellmanEquation","RL"],"title":"Bellman Equation: Gridworld","uri":"/bellmanequation-gridworld/"},{"categories":["随想"],"content":"坏习惯 这是上半年某天的记录，也可以概括为我这一年做事情的糟糕写照 所以新的一年就是一个目标：尽可能多的制造心流。蹬起我心爱的心流自行车~ ","date":"2022-02-01","objectID":"/2021%E4%B8%80%E8%A7%88/:1:0","tags":["年度"],"title":"2021一览","uri":"/2021%E4%B8%80%E8%A7%88/"},{"categories":["随想"],"content":"好念头 Be brave, be curious, be determined, overvome the odds. It can be done. ","date":"2022-02-01","objectID":"/2021%E4%B8%80%E8%A7%88/:2:0","tags":["年度"],"title":"2021一览","uri":"/2021%E4%B8%80%E8%A7%88/"},{"categories":["Android"],"content":"摘要 结论： WIFI：按RSSI分为五档。0: (-∞, -88)，1: [-88, -77)，2: [-77, -66)，3: [-66, -55)，4: [-55, +∞) 4G： 5G： ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:0:0","tags":["Android","信号强度"],"title":"（未完）安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["Android"],"content":"WIFI ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:1:0","tags":["Android","信号强度"],"title":"（未完）安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["Android"],"content":"关键源码：link public static int calculateSignalLevel(int rssi, int numLevels) { if (rssi \u003c= MIN_RSSI) { return 0; } else if (rssi \u003e= MAX_RSSI) { return numLevels - 1; } else { float inputRange = (MAX_RSSI - MIN_RSSI); float outputRange = (numLevels - 1); return (int)((float)(rssi - MIN_RSSI) * outputRange / inputRange); } } 第一个参数就是rssi，整型；第二个参数是分级总级数，在安卓中一共分为0~4，5级，因此第二个参数传入值通常为5。而对于MIN_RSSI和MAX_RSSI，在此.java中也给了值： /** Anything worse than or equal to this will show 0 bars. */ private static final int MIN_RSSI = -100; /** Anything better than or equal to this will show the max bars. */ private static final int MAX_RSSI = -55; public static final int RSSI_LEVELS = 5; ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:1:1","tags":["Android","信号强度"],"title":"（未完）安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["Android"],"content":"结论 不难算出这5档的范围为： 0: (-∞, -88) 1: [-88, -77) 2: [-77, -66) 3: [-66, -55) 4: [-55, +∞) 信息 对于2.4GHz和5GHz，虽然都使用这同一套划分方法，但是由于距离AP同样距离时，两个频段所得到的rssi值是不一样的。 ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:1:2","tags":["Android","信号强度"],"title":"（未完）安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["Android"],"content":"4G ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:2:0","tags":["Android","信号强度"],"title":"（未完）安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["Android"],"content":"RSRP 4GLTE的决策变量不再主要是RSSI了，还有另外一个比较重要的物理量RSRP，一些前置知识 ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:2:1","tags":["Android","信号强度"],"title":"（未完）安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["Android"],"content":"源码分析 在SignalStrength.javaline758，getLteLevel()获取了LTE的level public int getLteLevel() { return mLte.getLevel(); } 这个方法源自于CellSignalStrengthLte.javaline230 public int getLevel() { return mLevel; } 这里是直接返回了mLevel这个全局变量。 在方法setDefaultValues()中，对它进行了初始化，值为SIGNAL_STRENGTH_NONE_OR_UNKNOWN，不难发现还有另外一个方法在更新信号的level， updateLevel(PersistableBundle cc, ServiceState ss)，line275 ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:2:2","tags":["Android","信号强度"],"title":"（未完）安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["Android"],"content":"结论 ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:2:3","tags":["Android","信号强度"],"title":"（未完）安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["Android"],"content":"5G ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:3:0","tags":["Android","信号强度"],"title":"（未完）安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["dash.js"],"content":"师兄之前已经写过了在CustomRules那边添加自定义ABR算法的文章，并且能够用。这里从它内置的入手，看下能否做到 ","date":"2021-12-18","objectID":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/:0:0","tags":["前端","学习框架"],"title":"（未完）在dash.js 3.0.1中添加自定义ABR算法——内置版本","uri":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/"},{"categories":["dash.js"],"content":"1. 让面板选项对应的ABR算法是唯一生效/工作的算法 ","date":"2021-12-18","objectID":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/:1:0","tags":["前端","学习框架"],"title":"（未完）在dash.js 3.0.1中添加自定义ABR算法——内置版本","uri":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/"},{"categories":["dash.js"],"content":"先看看dashjs默认调用的ABR逻辑 参照v4.1.0的abr调用栈，v3.0.1的ABR调用栈丝毫没变： 1️⃣【ScheduleController】schedule() 2️⃣【AbrController】checkPlaybackQuality(type) 3️⃣【ABRRulesCollection】getMaxQuality(rulesContext) 4️⃣【各ABR算法】getMaxIndex(rulesContext) 到了第四层就是每一个ABR算法具体的内容，但是这里不深入。看关键的第三层，位于/src/streaming/rules/abr/ABRRulesCollection.js中的getMaxQuality(rulesContext)函数 function getMaxQuality(rulesContext) { const switchRequestArray = qualitySwitchRules.map(rule =\u003e rule.getMaxIndex(rulesContext)); const activeRules = getActiveRules(switchRequestArray); const maxQuality = getMinSwitchRequest(activeRules); return maxQuality || SwitchRequest(context).create(); } 该函数的返回值即为下一个视频块应有的质量quality。将他们都打印出来之后可以直观的得到：qualitySwitchRules中装载的是当前策略下的所有ABR算法，通过array的.map属性，每个AbrRule的结果存放在switchRequestArray中；activeRules则进一步过滤掉了相交于上一次没有质量变化的switchRequest（这是他们的返回值）；最后经过getMinSwitchRequest选择出active生效的Q中最小的一个。（maybe不太对，这个函数还没细看） 所以显而易见，需要改造的是到这一步之前，qualitySwitchRules的内容 ","date":"2021-12-18","objectID":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/:1:1","tags":["前端","学习框架"],"title":"（未完）在dash.js 3.0.1中添加自定义ABR算法——内置版本","uri":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/"},{"categories":["dash.js"],"content":"按选择修改qualitySwitchRules qualitySwitchRules在最开始初始化的时候就被定义好了，函数initialize()中，qualitySwitchRules一来就push了5个进去，也就是说默认的算法组里面有BolaRule、ThroughputRule、InsufficientBufferRule、SwitchHistoryRule和DroppedFramesRule这五种 function initialize() { qualitySwitchRules = []; // 是个list abandonFragmentRules = []; // qualitySwitchRules一来就push了5个进去，也就是说默认的算法组里面有BolaRule、ThroughputRule、InsufficientBufferRule、SwitchHistoryRule和DroppedFramesRule这五种 if (settings.get().streaming.abr.useDefaultABRRules) { // Only one of BolaRule and ThroughputRule will give a switchRequest.quality !== SwitchRequest.NO_CHANGE. // This is controlled by useBufferOccupancyABR mechanism in AbrController. qualitySwitchRules.push( BolaRule(context).create({ dashMetrics: dashMetrics, mediaPlayerModel: mediaPlayerModel, settings: settings }) ); qualitySwitchRules.push( ThroughputRule(context).create({ dashMetrics: dashMetrics }) ); qualitySwitchRules.push( InsufficientBufferRule(context).create({ dashMetrics: dashMetrics }) ); qualitySwitchRules.push( SwitchHistoryRule(context).create() ); qualitySwitchRules.push( DroppedFramesRule(context).create() ); abandonFragmentRules.push( AbandonRequestsRule(context).create({ dashMetrics: dashMetrics, mediaPlayerModel: mediaPlayerModel, settings: settings }) ); } // add custom ABR rules if any —————— 这里是customABRRules添加进来的地方，不动 ...... } 那么就依据面板选择，重写这里的逻辑。v3.0.1也是通过修改setting进行设定的，这里的接口是：settings.get().streaming.abr.ABRStrategy，类型是字符串。因此可以做一个简单的判断语句，按情况向这个list中放入rules 这样可以确保rules执行的唯一性 ","date":"2021-12-18","objectID":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/:1:2","tags":["前端","学习框架"],"title":"（未完）在dash.js 3.0.1中添加自定义ABR算法——内置版本","uri":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/"},{"categories":["dash.js"],"content":"2. 🧐仿照内置格式写一个rule放进去（later） ","date":"2021-12-18","objectID":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/:2:0","tags":["前端","学习框架"],"title":"（未完）在dash.js 3.0.1中添加自定义ABR算法——内置版本","uri":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/"},{"categories":["dash.js"],"content":"1. 在树莓派上配置3.0.1所需环境 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:1:0","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"安装grunt grunt是前几年使用的一个打包工具吧，现在dashjs的项目用的是webpack了。安装grunt很简单，只需要一句 npm install -g grunt-cli 当然需要提前配好nodejs环境。安装完之后验证 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:1:1","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"gurnt装不上怎么办 注意 这里可能会出现找不到grunt的失败提示，那么多半是npm/bin的路径没有添加到环境变量中去。使用熟悉的 sudo vim /etc/profile 将这句话添加到结尾 export PATH=/root/nodejs/bin:$PATH 最后记得再source一下 source /etc/profile 至此环境就配好了 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:1:2","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"2. 正确添加内置Bola的输出量 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:2:0","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"项目install准备 官方文档说的很清楚，这里过一遍 npm install # 注意这一步是必须要求grunt时已经安装好了的，否则就会一直被一个超时问题给卡住🙄 grunt debug 用grunt dev可以看得到我们的html目录在哪里 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:2:1","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"网站上线 通过一些顺藤摸瓜，可以得到访问目标是http://192.168.1.167:3002/samples/dash-if-reference-player/index.html，因此就应该把ngnix网站根目录改为当前的dashjs-301就好了 sudo vim /etc/nginx/sites-available/default # root /home/pi/dashjs-301; sudo service nginx restart 访问http://192.168.1.167/samples/dash-if-reference-player/index.html即可 完了之后把获取视频的地址改为http://10.61.140.191:3456/video-src/bbb-4s-an.mpd，这里用路由器做了一些端口转发，直接访问的是路由器的ip。（用内网突然访问不到了，所以换成这个 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:2:2","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"测试输出 这里就随便在/src/streaming/rules/abr/BolaRule.js中输出一些东西，打包，运行即可。验证的确是执行了Bola算法了的即可。 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:2:3","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"添加输出量 注意 前提：让工作的只有BolaRule唯一一个内置算法，因为原生的dashjs的内置算法是混合着算的，详见这篇 然后进行这些物理量的输出： /**Parameters * @param {string} mediaType mediaType - * @param {number} last_last_bitrate bolaState.lastQuality - 上一次选择的quality * @param {number} bufferLevel bufferLevel - [call dashMetric API] * @param {number} latency latency_cus - [call dashMetric API] the time in seconds from request of segment to receipt of first byte * @param {number} downloadTime downloadTime - the time in seconds from first byte being received to the last byte * @param {number} idleTime idleTime - ? * @param {number} rebufferTime rebufferTime - * @param {number} chunkSize chunkSize - * @param {number} throughput throughput_cus - * @param {number} app_throughput app_throughput - * @param {number} time_request time_request - * @param {number} time_response time_response - * @param {number} time_finish time_finish - * @param {number} cur_reward cur_reward - QoE */ 检查一下输出来的chunksize是否正常，这个版本的fastSwitch是没有bug的 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:2:4","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"3. 两个问题 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:3:0","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"useBufferOccupancyABR 加上输出，跑了很多遍之后发现，每次输出来的chunksize大小块都是从index=4开始的，前四个块的信息并没有打印出来。但是肯定是下载了的。这一次的chunkerror原因不再是fastSwitch，我想了想，并没有执行到输出语句，那么一定是提前退出了。就这样排查到了useBufferOccupancyABR这个地方。 这个地方从rulesContext中取出了useBufferOccupancyABR这个setting中的布尔值 该变量在setting中的含义是：是否使用BOLA这个abr策略，默认值为false。 我用的就是BOLA，它为false就很不合理。因此我直接把这句return注释掉了（逃🏃‍ 问题 为什么使用BolaRule，但是却默认这个变量初始值为false？ 那么到后面进行了前四个chunk下载之后，这个值变为true了？ 每次都是如此规整的6次非使用bola，中间伴随着两次mpd请求的问题，😶我仍然不知道是为什么。但是这里也可以看出来，两个红框里面的对于非media的请求，就是应该提前return出来。 这里是否可以理解成一些误打误撞… 究竟是哪里让我卡住，理解不通了呢… ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:3:1","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"lastRequest.type !== ‘MediaSegment’ if (lastRequest.type !== 'MediaSegment') { logger.debug(\"Last request is not a media segment, bailing.\"); return switchRequest; } 他会不规则地打印出来…原因？？？ ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:3:2","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"4. 上服务器 树莓派上都能跑了的话，就把这一套搬到Ubuntu服务器上去。 copy整个项目文件到根目录 更改/usr/local/nginx/conf/nginx.conf，其中location字段改为/root/dashjs-301。并且将第一句的#user nobody改为user root。又是一个意想不到的权限403问题😋 重启ngnix服务： nginx -s reload 在main.js中修改mpd文件地路径：http://serverIP:port/video-src/bbb-4s-an.mpd 访问网址http://the.server.ip.190:8007/samples/dash-if-reference-player/index.html 结束 使用：option中取消Fast Switching ABR，选中ABR Strategy: BOLA，控制台filter为inner，load ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:4:0","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["随想"],"content":"起因 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:1:0","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"是怎么选上20级限选的游泳中级的？ 在这学期初，游泳协会的群里突然说xx老师的课头差人，可以补选学习自由泳。我想着大四了应该时间比较充裕，就不知死活地选上了。但其实选错课头了，选到了另外一个王老师的课。我心想这应该也没什么，上就上吧。课上全是20级的学弟，我觉得也还好… ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:1:1","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"为什么要选中级？ 蛙泳在去年的综合素养课上学会了，只花了两三节课。我就天真的认为自由泳应该也不会太难，就直接选了。顺便还可以监督我锻炼身体。 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:1:2","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"最后两周的艰苦练习 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:2:0","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"模拟考只能扑腾10M 倒数第二周（第15周）老师说进行模拟考，内容是自由泳游50M。 我人傻了。 我知道我自己还压根都不会，动作要领也全没有过多联系过。对于自由泳难度的低估和盲目的自信让我忘记了时间的流逝（该考试了喂！），于是十分尴尬的在大家的注释下爬完了50m，游一下，停一下。全程50m我停了有八九次吧。 游到老师跟前，老师问，你为啥要停呢？我说我呛水，游不上来。他随口一说“这样游不完，那就只有挂。”怎料这句话在我心中回荡了一整周，做梦都有它的影子。 当即就开始了一周的难受。 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:2:1","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"搜寻资料，每日练习 最后这两周我天天都在池子里泡着，最开始是练习手脚配合，这里主要看的是梦觉游泳的教程，我觉得这个老师讲的也很好。他详细描述了例如鞭状打腿、转体、囫囵游这些细节，并且举例生动，游的也很到位。我全都看完一遍之后，记下来了一些重要的点，游泳休息时候就回去拿手机看。我是多希望能像他那样游得那么6啊… ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:2:2","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"最后一天了，还是不行 我就真的坚持到了最后一天，游到力竭手断脚酸也只能游个十几米。虽然心里和身体都比较明白六次腿和两次划手这样的律动了，不过体力不支+核心没力气+打腿没那么有劲+其他我未知的原因，如果一考虑到换气，整个节奏都乱掉了。 周一从游泳馆出来真的心态太难受了，其实每天游完都会觉得没有进步，50m遥不可及。但是没办法，我不能停止练习，这是我一直坚持的一点，虽然心里难受得很，但是很奇怪我就是没有停下来。 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:2:3","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"真的成功了！ ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:3:0","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"上课了 最后一堂课，下水练习的时候老师就说， “你动作啥的没有大问题，为什么要停下来呢？就一直打腿就好了。” 我说我不行，我真的不行，很快就没有力气了。肌肉酸得不行，再呼吸都没办法了。 “你打腿都能打50m，你就先练着打腿。” “我不行，确实没办法，太累了，就停下来了。” “那是因为你觉得你不行，你就坚持坚持，可以游的，你先去练，你最后考。” ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:3:1","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"焦灼地练习+等待 其实这个时候我感觉把注意力放在打腿上，需要唤起的时候再转体换气，似乎能好那么一些？但是仍然，我没法坚持下来。 就这样我就很难受地在一旁练着，别的同学一个接着一个的考。我看见有抬头换气的，但他们也全程坚持下来了…. 更难受了。 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:3:2","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"游得好，到我了 临出发前助教劝我说，“你就一口气，一口气憋着就过去了”，然而此刻我还是不相信，我说我真的不行，力气没了就是没了，过不去。“我知道那是什么感觉，但是你就坚持一下，这口气憋着就能过去”。我没说啥了，我就点了点头，因为我不好意思再说下去了。 突然间开始了，我就蹬了一下墙壁，先漂他个几米，然后开始换气呼吸，一直打腿。我转体换气得时候，发现已经游了一半的了，这个距离是之前练习从来没游到过的。 但是还有一半啊！ 此刻我的腿只剩下三分之一的力量了，而且我能明显感觉到我的手也开始酸了，身体也在下沉，每次换气都不是侧头而是抬头换气的意思了。但是不能停！！！我就继续拼命打腿，力气耗尽了，还没到，但是不能停不能停…. 最后其实没有呼吸到新鲜空气了，整个人就像快溺死了一样，甚至有几口换气充满绝望地喝了好几口水。力竭了，真的没劲了…啊，需要氧气但是根本没力气再爬上去。 快要到了，人也要没了，发现手能碰到池边，真的没劲了，用腿蹬了一下，到了，真就到了😭 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:3:3","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"祝贺我 我像起死回生一样站起来，老师和助教都在岸上笑着看着我。老师说，“看吧，你可以，可以游完的，而且你最后动作也保持得很好，整个流线型没有变，不然你不会比较快的游过来，否则更累。真的不错，很好，祝贺你！”说完他伸出手，我也去够他的手。 妈呀，真的感人。我转过头去，差点流泪。老师还在夸，我甚至也没能缓过神来，这50m是不可能复现的，因为真的平常不会自己把自己逼到这样的地步，我就是逼不了自己…不知道这是好是坏，不过在此之前我确实一直都很笃定：我真的不行… ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:3:4","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"结课语 最后大家都测试完了，最后三位和我一样艰难的男生也测完了，大家全程在旁边加油，整个体育课瞬间在我心里升华了…老师在最后分别让大家为这三位同学，和我，鼓掌，以示鼓励。他说，“其实女生只要求35m就能及格了，但是我没告诉你。”给大伙儿逗乐了，我更加感谢这位王老师了。“怎么样，这两周的练习还是有用的吧？”我泡在水里点头回答，“嗯！”。 我是一直对某些陈词不感冒的，像什么“不试一试，你怎么知道”这样的话，我认为我一直在试，我并不缺乏试一试的勇气，所以我一直没停止没放弃，虽然内心真的难受爆炸了。 我也不借此发挥去探究更多的自己了，还是谢谢吧，老师同学和自己。 只要不放弃，只要不放弃… 没有后半句。 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:4:0","tags":["年度"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["dash.js"],"content":"一、在服务器上安装nodejs 服务器os为ubuntu，因此去到nodejs官网下载对应的node-v15.12.0-linux-x64.tar.xz，我下载的nodejs版本为15。 wget www.downloadlinkof.nodejs 解压 tar -xvf node-v15.12.0-linux-x64.tar.xz 重命名和创建软连接：注意这里的/path/to/nodejs/bin/node和/path/to/nodejs/bin/npm分别是到nodejs下node和npm的存放路径 mv node-v15.12.0-linux-x64 nodejs ln -s /path/to/nodejs/bin/node /usr/local/bin/node ln -s /path/to/nodejs/bin/npm /usr/local/bin/npm 安装完成之后进行验证 node -v v15.12.0 ","date":"2021-11-22","objectID":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/:1:0","tags":["前端","配环境","nodejs"],"title":"dash.js 4.1.1的环境配置和相关问题解决","uri":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"categories":["dash.js"],"content":"二、首次编译 ","date":"2021-11-22","objectID":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/:2:0","tags":["前端","配环境","nodejs"],"title":"dash.js 4.1.1的环境配置和相关问题解决","uri":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"categories":["dash.js"],"content":"源文件不够，编译失败 这里是由于服务器上的dashjs原本不是照搬源码，因此有一些配置文件并没有全部放进来。所以再将源包中的src/、package.json、githook.js、eslintrc等缺失的文件原封不动的放进去即可 ","date":"2021-11-22","objectID":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/:2:1","tags":["前端","配环境","nodejs"],"title":"dash.js 4.1.1的环境配置和相关问题解决","uri":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"categories":["dash.js"],"content":"环境不完整 找不到tsc npm install typescript -g 此时仍然找不到tsc，参考stackoverflow上的一个评论，需要将nodejs的bin路径加到环境变量中去 export PATH=/prefixsPath/bin:$PATH 其中/prefix'sPath/bin是nodejs/bin的路径，即export PATH=/root/nodejs/bin:$PATH 注意export只会在当前终端结束之前生效，为了避免每次都重复打这一行命令，应该直接改对所有用户生效的环境变量 sudo vim /etc/profile 添加export这一句话到末尾，然后再source一下 source /etc/profile rimraf sudo apt-get install webpack npm install -g webpack npm i -g webpack-cli ","date":"2021-11-22","objectID":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/:2:2","tags":["前端","配环境","nodejs"],"title":"dash.js 4.1.1的环境配置和相关问题解决","uri":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"categories":["dash.js"],"content":"JavaScript heap out of memory 内存溢出 👉参考，和一些待后续学习的方法：Debugging Memory Leaks in Node.js Applications export NODE_OPTIONS=\"--max-old-space-size=512\" 也添加到/etc/profile中 至此，dashjs环境上的问题告一段落。 后续todo：dashjs上的内存泄漏都在哪里——nodejs的内存泄漏调试办法 后记：我后来在树莓派4B上试了试整个环境的配置，全程丝滑顺利，让我怀疑方向是否错了？ 直接把dashjs放在根目录 然后修改/etc/nginx/sites-available/default（服务器上nginx的设置文件路径是：/usr/local/nginx/conf/nginx.conf）中的 root /home/pi/dashjs; 有时候需要再重启一下ngnix服务 sudo service nginx restart 这里就是nginx的站点根目录。在浏览器访问网址：http://ip.of.your.server/samples/dash-if-reference-player/index.html即可看到sample-player界面了 ","date":"2021-11-22","objectID":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/:2:3","tags":["前端","配环境","nodejs"],"title":"dash.js 4.1.1的环境配置和相关问题解决","uri":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"categories":[],"content":"哇 ","date":"2021-11-21","objectID":"/about/:1:0","tags":[],"title":"About Me","uri":"/about/"},{"categories":["随想"],"content":"你好哇 ","date":"2021-11-21","objectID":"/helloworld/:1:0","tags":[],"title":"Hello, world","uri":"/helloworld/"}]