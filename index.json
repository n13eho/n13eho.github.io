[{"categories":["什么"],"content":"摘要 结论： WIFI：按RSSI分为五档。0: (-∞, -88)，1: [-88, -77)，2: [-77, -66)，3: [-66, -55)，4: [-55, +∞) 4G： 5G： ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:0:0","tags":["Android","信号"],"title":"安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["什么"],"content":"WIFI ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:1:0","tags":["Android","信号"],"title":"安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["什么"],"content":"关键源码：link public static int calculateSignalLevel(int rssi, int numLevels) { if (rssi \u003c= MIN_RSSI) { return 0; } else if (rssi \u003e= MAX_RSSI) { return numLevels - 1; } else { float inputRange = (MAX_RSSI - MIN_RSSI); float outputRange = (numLevels - 1); return (int)((float)(rssi - MIN_RSSI) * outputRange / inputRange); } } 第一个参数就是rssi，整型；第二个参数是分级总级数，在安卓中一共分为0~4，5级，因此第二个参数传入值通常为5。而对于MIN_RSSI和MAX_RSSI，在此.java中也给了值： /** Anything worse than or equal to this will show 0 bars. */ private static final int MIN_RSSI = -100; /** Anything better than or equal to this will show the max bars. */ private static final int MAX_RSSI = -55; public static final int RSSI_LEVELS = 5; ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:1:1","tags":["Android","信号"],"title":"安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["什么"],"content":"结论 不难算出这5档的范围为： 0: (-∞, -88) 1: [-88, -77) 2: [-77, -66) 3: [-66, -55) 4: [-55, +∞) 信息 对于2.4GHz和5GHz，虽然都使用这同一套划分方法，但是由于距离AP同样距离时，两个频段所得到的rssi值是不一样的。 ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:1:2","tags":["Android","信号"],"title":"安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["什么"],"content":"4G ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:2:0","tags":["Android","信号"],"title":"安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["什么"],"content":"RSRP 4GLTE的决策变量不再主要是RSSI了，还有另外一个比较重要的物理量RSRP，一些前置知识 ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:2:1","tags":["Android","信号"],"title":"安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["什么"],"content":"源码分析 在SignalStrength.javaline758，getLteLevel()获取了LTE的level public int getLteLevel() { return mLte.getLevel(); } 这个方法源自于CellSignalStrengthLte.javaline230 public int getLevel() { return mLevel; } 这里是直接返回了mLevel这个全局变量。 在方法setDefaultValues()中，对它进行了初始化，值为SIGNAL_STRENGTH_NONE_OR_UNKNOWN，不难发现还有另外一个方法在更新信号的level， updateLevel(PersistableBundle cc, ServiceState ss)，line275 ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:2:2","tags":["Android","信号"],"title":"安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["什么"],"content":"结论 ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:2:3","tags":["Android","信号"],"title":"安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["什么"],"content":"5G ","date":"2022-01-22","objectID":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/:3:0","tags":["Android","信号"],"title":"安卓网络信号强度划分","uri":"/%E5%AE%89%E5%8D%93%E7%BD%91%E7%BB%9C%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E5%88%92%E5%88%86/"},{"categories":["dash.js"],"content":"师兄之前已经写过了在CustomRules那边添加自定义ABR算法的文章，并且能够用。这里从它内置的入手，看下能否做到 ","date":"2021-12-18","objectID":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/:0:0","tags":["前端","学习框架"],"title":"在dash.js 3.0.1中添加自定义ABR算法——内置版本（未完）","uri":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/"},{"categories":["dash.js"],"content":"1. 让面板选项对应的ABR算法是唯一生效/工作的算法 ","date":"2021-12-18","objectID":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/:1:0","tags":["前端","学习框架"],"title":"在dash.js 3.0.1中添加自定义ABR算法——内置版本（未完）","uri":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/"},{"categories":["dash.js"],"content":"先看看dashjs默认调用的ABR逻辑 参照v4.1.0的abr调用栈，v3.0.1的ABR调用栈丝毫没变： 1️⃣【ScheduleController】schedule() 2️⃣【AbrController】checkPlaybackQuality(type) 3️⃣【ABRRulesCollection】getMaxQuality(rulesContext) 4️⃣【各ABR算法】getMaxIndex(rulesContext) 到了第四层就是每一个ABR算法具体的内容，但是这里不深入。看关键的第三层，位于/src/streaming/rules/abr/ABRRulesCollection.js中的getMaxQuality(rulesContext)函数 function getMaxQuality(rulesContext) { const switchRequestArray = qualitySwitchRules.map(rule =\u003e rule.getMaxIndex(rulesContext)); const activeRules = getActiveRules(switchRequestArray); const maxQuality = getMinSwitchRequest(activeRules); return maxQuality || SwitchRequest(context).create(); } 该函数的返回值即为下一个视频块应有的质量quality。将他们都打印出来之后可以直观的得到：qualitySwitchRules中装载的是当前策略下的所有ABR算法，通过array的.map属性，每个AbrRule的结果存放在switchRequestArray中；activeRules则进一步过滤掉了相交于上一次没有质量变化的switchRequest（这是他们的返回值）；最后经过getMinSwitchRequest选择出active生效的Q中最小的一个。（maybe不太对，这个函数还没细看） 所以显而易见，需要改造的是到这一步之前，qualitySwitchRules的内容 ","date":"2021-12-18","objectID":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/:1:1","tags":["前端","学习框架"],"title":"在dash.js 3.0.1中添加自定义ABR算法——内置版本（未完）","uri":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/"},{"categories":["dash.js"],"content":"按选择修改qualitySwitchRules qualitySwitchRules在最开始初始化的时候就被定义好了，函数initialize()中，qualitySwitchRules一来就push了5个进去，也就是说默认的算法组里面有BolaRule、ThroughputRule、InsufficientBufferRule、SwitchHistoryRule和DroppedFramesRule这五种 function initialize() { qualitySwitchRules = []; // 是个list abandonFragmentRules = []; // qualitySwitchRules一来就push了5个进去，也就是说默认的算法组里面有BolaRule、ThroughputRule、InsufficientBufferRule、SwitchHistoryRule和DroppedFramesRule这五种 if (settings.get().streaming.abr.useDefaultABRRules) { // Only one of BolaRule and ThroughputRule will give a switchRequest.quality !== SwitchRequest.NO_CHANGE. // This is controlled by useBufferOccupancyABR mechanism in AbrController. qualitySwitchRules.push( BolaRule(context).create({ dashMetrics: dashMetrics, mediaPlayerModel: mediaPlayerModel, settings: settings }) ); qualitySwitchRules.push( ThroughputRule(context).create({ dashMetrics: dashMetrics }) ); qualitySwitchRules.push( InsufficientBufferRule(context).create({ dashMetrics: dashMetrics }) ); qualitySwitchRules.push( SwitchHistoryRule(context).create() ); qualitySwitchRules.push( DroppedFramesRule(context).create() ); abandonFragmentRules.push( AbandonRequestsRule(context).create({ dashMetrics: dashMetrics, mediaPlayerModel: mediaPlayerModel, settings: settings }) ); } // add custom ABR rules if any —————— 这里是customABRRules添加进来的地方，不动 ...... } 那么就依据面板选择，重写这里的逻辑。v3.0.1也是通过修改setting进行设定的，这里的接口是：settings.get().streaming.abr.ABRStrategy，类型是字符串。因此可以做一个简单的判断语句，按情况向这个list中放入rules 这样可以确保rules执行的唯一性 ","date":"2021-12-18","objectID":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/:1:2","tags":["前端","学习框架"],"title":"在dash.js 3.0.1中添加自定义ABR算法——内置版本（未完）","uri":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/"},{"categories":["dash.js"],"content":"2. 🧐仿照内置格式写一个rule放进去（later） ","date":"2021-12-18","objectID":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/:2:0","tags":["前端","学习框架"],"title":"在dash.js 3.0.1中添加自定义ABR算法——内置版本（未完）","uri":"/%E5%9C%A8dashjs3.0.1%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89abr%E7%AE%97%E6%B3%95%E5%86%85%E7%BD%AE%E7%89%88%E6%9C%AC/"},{"categories":["dash.js"],"content":"1. 在树莓派上配置3.0.1所需环境 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:1:0","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"安装grunt grunt是前几年使用的一个打包工具吧，现在dashjs的项目用的是webpack了。安装grunt很简单，只需要一句 npm install -g grunt-cli 当然需要提前配好nodejs环境。安装完之后验证 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:1:1","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"gurnt装不上怎么办 注意 这里可能会出现找不到grunt的失败提示，那么多半是npm/bin的路径没有添加到环境变量中去。使用熟悉的 sudo vim /etc/profile 将这句话添加到结尾 export PATH=/root/nodejs/bin:$PATH 最后记得再source一下 source /etc/profile 至此环境就配好了 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:1:2","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"2. 正确添加内置Bola的输出量 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:2:0","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"项目install准备 官方文档说的很清楚，这里过一遍 npm install # 注意这一步是必须要求grunt时已经安装好了的，否则就会一直被一个超时问题给卡住🙄 grunt debug 用grunt dev可以看得到我们的html目录在哪里 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:2:1","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"网站上线 通过一些顺藤摸瓜，可以得到访问目标是http://192.168.1.167:3002/samples/dash-if-reference-player/index.html，因此就应该把ngnix网站根目录改为当前的dashjs-301就好了 sudo vim /etc/nginx/sites-available/default # root /home/pi/dashjs-301; sudo service nginx restart 访问http://192.168.1.167/samples/dash-if-reference-player/index.html即可 完了之后把获取视频的地址改为http://10.61.140.191:3456/video-src/bbb-4s-an.mpd，这里用路由器做了一些端口转发，直接访问的是路由器的ip。（用内网突然访问不到了，所以换成这个 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:2:2","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"测试输出 这里就随便在/src/streaming/rules/abr/BolaRule.js中输出一些东西，打包，运行即可。验证的确是执行了Bola算法了的即可。 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:2:3","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"添加输出量 注意 前提：让工作的只有BolaRule唯一一个内置算法，因为原生的dashjs的内置算法是混合着算的，详见这篇 然后进行这些物理量的输出： /**Parameters * @param {string} mediaType mediaType - * @param {number} last_last_bitrate bolaState.lastQuality - 上一次选择的quality * @param {number} bufferLevel bufferLevel - [call dashMetric API] * @param {number} latency latency_cus - [call dashMetric API] the time in seconds from request of segment to receipt of first byte * @param {number} downloadTime downloadTime - the time in seconds from first byte being received to the last byte * @param {number} idleTime idleTime - ? * @param {number} rebufferTime rebufferTime - * @param {number} chunkSize chunkSize - * @param {number} throughput throughput_cus - * @param {number} app_throughput app_throughput - * @param {number} time_request time_request - * @param {number} time_response time_response - * @param {number} time_finish time_finish - * @param {number} cur_reward cur_reward - QoE */ 检查一下输出来的chunksize是否正常，这个版本的fastSwitch是没有bug的 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:2:4","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"3. 两个问题 ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:3:0","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"useBufferOccupancyABR 加上输出，跑了很多遍之后发现，每次输出来的chunksize大小块都是从index=4开始的，前四个块的信息并没有打印出来。但是肯定是下载了的。这一次的chunkerror原因不再是fastSwitch，我想了想，并没有执行到输出语句，那么一定是提前退出了。就这样排查到了useBufferOccupancyABR这个地方。 这个地方从rulesContext中取出了useBufferOccupancyABR这个setting中的布尔值 该变量在setting中的含义是：是否使用BOLA这个abr策略，默认值为false。 我用的就是BOLA，它为false就很不合理。因此我直接把这句return注释掉了（逃🏃‍ 问题 为什么使用BolaRule，但是却默认这个变量初始值为false？ 那么到后面进行了前四个chunk下载之后，这个值变为true了？ 每次都是如此规整的6次非使用bola，中间伴随着两次mpd请求的问题，😶我仍然不知道是为什么。但是这里也可以看出来，两个红框里面的对于非media的请求，就是应该提前return出来。 这里是否可以理解成一些误打误撞… 究竟是哪里让我卡住，理解不通了呢… ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:3:1","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"lastRequest.type !== ‘MediaSegment’ if (lastRequest.type !== 'MediaSegment') { logger.debug(\"Last request is not a media segment, bailing.\"); return switchRequest; } 他会不规则地打印出来…原因？？？ ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:3:2","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["dash.js"],"content":"4. 上服务器 树莓派上都能跑了的话，就把这一套搬到Ubuntu服务器上去。 copy整个项目文件到根目录 更改/usr/local/nginx/conf/nginx.conf，其中location字段改为/root/dashjs-301。并且将第一句的#user nobody改为user root。又是一个意想不到的权限403问题😋 重启ngnix服务： nginx -s reload 在main.js中修改mpd文件地路径：http://serverIP:port/video-src/bbb-4s-an.mpd 访问网址http://the.server.ip.190:8007/samples/dash-if-reference-player/index.html 结束 使用：option中取消Fast Switching ABR，选中ABR Strategy: BOLA，控制台filter为inner，load ","date":"2021-12-18","objectID":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/:4:0","tags":["配环境","前端"],"title":"给dash.js 3.0.1中内置BolaRule加上输出","uri":"/%E7%BB%99dash.js-3.0.1%E4%B8%AD%E5%86%85%E7%BD%AEbolarule%E5%8A%A0%E4%B8%8A%E8%BE%93%E5%87%BA/"},{"categories":["随想"],"content":"起因 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:1:0","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"是怎么选上20级限选的游泳中级的？ 在这学期初，游泳协会的群里突然说xx老师的课头差人，可以补选学习自由泳。我想着大四了应该时间比较充裕，就不知死活地选上了。但其实选错课头了，选到了另外一个王老师的课。我心想这应该也没什么，上就上吧。课上全是20级的学弟，我觉得也还好… ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:1:1","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"为什么要选中级？ 蛙泳在去年的综合素养课上学会了，只花了两三节课。我就天真的认为自由泳应该也不会太难，就直接选了。顺便还可以监督我锻炼身体。 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:1:2","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"最后两周的艰苦练习 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:2:0","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"模拟考只能扑腾10M 倒数第二周（第15周）老师说进行模拟考，内容是自由泳游50M。 我人傻了。 我知道我自己还压根都不会，动作要领也全没有过多联系过。对于自由泳难度的低估和盲目的自信让我忘记了时间的流逝（该考试了喂！），于是十分尴尬的在大家的注释下爬完了50m，游一下，停一下。全程50m我停了有八九次吧。 游到老师跟前，老师问，你为啥要停呢？我说我呛水，游不上来。他随口一说“这样游不完，那就只有挂。”怎料这句话在我心中回荡了一整周，做梦都有它的影子。 当即就开始了一周的难受。 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:2:1","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"搜寻资料，每日练习 最后这两周我天天都在池子里泡着，最开始是练习手脚配合，这里主要看的是梦觉游泳的教程，我觉得这个老师讲的也很好。他详细描述了例如鞭状打腿、转体、囫囵游这些细节，并且举例生动，游的也很到位。我全都看完一遍之后，记下来了一些重要的点，游泳休息时候就回去拿手机看。我是多希望能像他那样游得那么6啊… ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:2:2","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"最后一天了，还是不行 我就真的坚持到了最后一天，游到力竭手断脚酸也只能游个十几米。虽然心里和身体都比较明白六次腿和两次划手这样的律动了，不过体力不支+核心没力气+打腿没那么有劲+其他我未知的原因，如果一考虑到换气，整个节奏都乱掉了。 周一从游泳馆出来真的心态太难受了，其实每天游完都会觉得没有进步，50m遥不可及。但是没办法，我不能停止练习，这是我一直坚持的一点，虽然心里难受得很，但是很奇怪我就是没有停下来。 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:2:3","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"真的成功了！ ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:3:0","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"上课了 最后一堂课，下水练习的时候老师就说， “你动作啥的没有大问题，为什么要停下来呢？就一直打腿就好了。” 我说我不行，我真的不行，很快就没有力气了。肌肉酸得不行，再呼吸都没办法了。 “你打腿都能打50m，你就先练着打腿。” “我不行，确实没办法，太累了，就停下来了。” “那是因为你觉得你不行，你就坚持坚持，可以游的，你先去练，你最后考。” ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:3:1","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"焦灼地练习+等待 其实这个时候我感觉把注意力放在打腿上，需要唤起的时候再转体换气，似乎能好那么一些？但是仍然，我没法坚持下来。 就这样我就很难受地在一旁练着，别的同学一个接着一个的考。我看见有抬头换气的，但他们也全程坚持下来了…. 更难受了。 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:3:2","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"游得好，到我了 临出发前助教劝我说，“你就一口气，一口气憋着就过去了”，然而此刻我还是不相信，我说我真的不行，力气没了就是没了，过不去。“我知道那是什么感觉，但是你就坚持一下，这口气憋着就能过去”。我没说啥了，我就点了点头，因为我不好意思再说下去了。 突然间开始了，我就蹬了一下墙壁，先漂他个几米，然后开始换气呼吸，一直打腿。我转体换气得时候，发现已经游了一半的了，这个距离是之前练习从来没游到过的。 但是还有一半啊！ 此刻我的腿只剩下三分之一的力量了，而且我能明显感觉到我的手也开始酸了，身体也在下沉，每次换气都不是侧头而是抬头换气的意思了。但是不能停！！！我就继续拼命打腿，力气耗尽了，还没到，但是不能停不能停…. 最后其实没有呼吸到新鲜空气了，整个人就像快溺死了一样，甚至有几口换气充满绝望地喝了好几口水。力竭了，真的没劲了…啊，需要氧气但是根本没力气再爬上去。 快要到了，人也要没了，发现手能碰到池边，真的没劲了，用腿蹬了一下，到了，真就到了😭 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:3:3","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"祝贺我 我像起死回生一样站起来，老师和助教都在岸上笑着看着我。老师说，“看吧，你可以，可以游完的，而且你最后动作也保持得很好，整个流线型没有变，不然你不会比较快的游过来，否则更累。真的不错，很好，祝贺你！”说完他伸出手，我也去够他的手。 妈呀，真的感人。我转过头去，差点流泪。老师还在夸，我甚至也没能缓过神来，这50m是不可能复现的，因为真的平常不会自己把自己逼到这样的地步，我就是逼不了自己…不知道这是好是坏，不过在此之前我确实一直都很笃定：我真的不行… ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:3:4","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["随想"],"content":"结课语 最后大家都测试完了，最后三位和我一样艰难的男生也测完了，大家全程在旁边加油，整个体育课瞬间在我心里升华了…老师在最后分别让大家为这三位同学，和我，鼓掌，以示鼓励。他说，“其实女生只要求35m就能及格了，但是我没告诉你。”给大伙儿逗乐了，我更加感谢这位王老师了。“怎么样，这两周的练习还是有用的吧？”我泡在水里点头回答，“嗯！”。 我是一直对某些陈词不感冒的，像什么“不试一试，你怎么知道”这样的话，我认为我一直在试，我并不缺乏试一试的勇气，所以我一直没停止没放弃，虽然内心真的难受爆炸了。 我也不借此发挥去探究更多的自己了，还是谢谢吧，老师同学和自己。 只要不放弃，只要不放弃… 没有后半句。 ","date":"2021-12-14","objectID":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/:4:0","tags":["limit"],"title":"游泳中级班的历练","uri":"/%E6%B8%B8%E6%B3%B3%E4%B8%AD%E7%BA%A7%E7%8F%AD%E7%9A%84%E5%8E%86%E7%BB%83/"},{"categories":["dash.js"],"content":"一、在服务器上安装nodejs 服务器os为ubuntu，因此去到nodejs官网下载对应的node-v15.12.0-linux-x64.tar.xz，我下载的nodejs版本为15。 wget www.downloadlinkof.nodejs 解压 tar -xvf node-v15.12.0-linux-x64.tar.xz 重命名和创建软连接：注意这里的/path/to/nodejs/bin/node和/path/to/nodejs/bin/npm分别是到nodejs下node和npm的存放路径 mv node-v15.12.0-linux-x64 nodejs ln -s /path/to/nodejs/bin/node /usr/local/bin/node ln -s /path/to/nodejs/bin/npm /usr/local/bin/npm 安装完成之后进行验证 node -v v15.12.0 ","date":"2021-11-22","objectID":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/:1:0","tags":["前端","配环境","nodejs"],"title":"dash.js 4.1.1的环境配置和相关问题解决","uri":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"categories":["dash.js"],"content":"二、首次编译 ","date":"2021-11-22","objectID":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/:2:0","tags":["前端","配环境","nodejs"],"title":"dash.js 4.1.1的环境配置和相关问题解决","uri":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"categories":["dash.js"],"content":"源文件不够，编译失败 这里是由于服务器上的dashjs原本不是照搬源码，因此有一些配置文件并没有全部放进来。所以再将源包中的src/、package.json、githook.js、eslintrc等缺失的文件原封不动的放进去即可 ","date":"2021-11-22","objectID":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/:2:1","tags":["前端","配环境","nodejs"],"title":"dash.js 4.1.1的环境配置和相关问题解决","uri":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"categories":["dash.js"],"content":"环境不完整 找不到tsc npm install typescript -g 此时仍然找不到tsc，参考stackoverflow上的一个评论，需要将nodejs的bin路径加到环境变量中去 export PATH=/prefixsPath/bin:$PATH 其中/prefix'sPath/bin是nodejs/bin的路径，即export PATH=/root/nodejs/bin:$PATH 注意export只会在当前终端结束之前生效，为了避免每次都重复打这一行命令，应该直接改对所有用户生效的环境变量 sudo vim /etc/profile 添加export这一句话到末尾，然后再source一下 source /etc/profile rimraf sudo apt-get install webpack npm install -g webpack npm i -g webpack-cli ","date":"2021-11-22","objectID":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/:2:2","tags":["前端","配环境","nodejs"],"title":"dash.js 4.1.1的环境配置和相关问题解决","uri":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"categories":["dash.js"],"content":"JavaScript heap out of memory 内存溢出 👉参考，和一些待后续学习的方法：Debugging Memory Leaks in Node.js Applications export NODE_OPTIONS=\"--max-old-space-size=512\" 也添加到/etc/profile中 至此，dashjs环境上的问题告一段落。 后续todo：dashjs上的内存泄漏都在哪里——nodejs的内存泄漏调试办法 后记：我后来在树莓派4B上试了试整个环境的配置，全程丝滑顺利，让我怀疑方向是否错了？ 直接把dashjs放在根目录 然后修改/etc/nginx/sites-available/default（服务器上nginx的设置文件路径是：/usr/local/nginx/conf/nginx.conf）中的 root /home/pi/dashjs; 有时候需要再重启一下ngnix服务 sudo service nginx restart 这里就是nginx的站点根目录。在浏览器访问网址：http://ip.of.your.server/samples/dash-if-reference-player/index.html即可看到sample-player界面了 ","date":"2021-11-22","objectID":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/:2:3","tags":["前端","配环境","nodejs"],"title":"dash.js 4.1.1的环境配置和相关问题解决","uri":"/dash.js-4.1.1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"categories":[],"content":"哇 ","date":"2021-11-21","objectID":"/about/:1:0","tags":[],"title":"About Me","uri":"/about/"},{"categories":["随想"],"content":"你好哇 ","date":"2021-11-21","objectID":"/helloworld/:1:0","tags":[],"title":"Hello, world","uri":"/helloworld/"}]